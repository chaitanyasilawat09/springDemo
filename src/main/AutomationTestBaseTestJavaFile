package com.spectre.qa.testscripts;

import com.spectre.qa.api.BaseApi;
import com.spectre.qa.utilities.ConfigProperties;
import com.spectre.qa.utilities.TestUtils;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.apache.http.HttpStatus;
import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.MutableCapabilities;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.ie.InternetExplorerOptions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsString;

public class BaseTest {

    public WebDriver driver;
    public Properties properties;
    private static String OS = System.getProperty("os.name").toLowerCase();
    private static Logger log = Logger.getLogger(BaseTest.class);

    public static boolean isIE = false;
    public static boolean isEdge = false;


    public BaseTest() {
    }

    @BeforeSuite(alwaysRun = true)
    public void beforeSuite() {

        properties = new Properties();
        try {
            properties.load(Thread.currentThread().getContextClassLoader().getResourceAsStream("config.properties"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        TestUtils.BASE_URL = System.getProperty("url") !=null ? System.getProperty("url"):properties.getProperty("url");
        TestUtils.BROWSER = System.getProperty("browser") !=null ? System.getProperty("browser"):properties.getProperty("browser");
        log.info("Base url is " + TestUtils.BASE_URL);
        log.info("Browser is " + TestUtils.BROWSER);
        TestUtils.PORT = properties.getProperty("port");
        RestAssured.baseURI = TestUtils.BASE_URL;
        RestAssured.port = 443;
        RestAssured.useRelaxedHTTPSValidation();

        // check system health
        //Response response = BaseApi.systemHealthCheck();
        //List<Map<String,String>> systemInfo = response.body().jsonPath().getList("results");

        //assertThat("system health check failed", response.getStatusCode()== HttpStatus.SC_OK);
        //assertThat(systemInfo.get(0).get("systemType"), containsString("COMMANDER"));

        //TestUtils.SPECTRSYSNAME = systemInfo.get(0).get("name");
        //TestUtils.SPECTREVERSION = systemInfo.get(0).get("version");
    }

    @BeforeMethod(alwaysRun = true)
    public void beforeTest() throws MalformedURLException {
        driver = getWebDriver();
    }

    @AfterMethod(alwaysRun = true)
    public void afterTest() {
        driver.quit();
    }

    public WebDriver getWebDriver() throws MalformedURLException {


        if(ConfigProperties.INSTANCE.isSaucelabsEnabled().equalsIgnoreCase("true")) {
            String sauceUserName = ConfigProperties.INSTANCE.getSauceUsername();
            String sauceAccessKey = ConfigProperties.INSTANCE.getSauceKey();
            String sauceURL = ConfigProperties.INSTANCE.getSauceUrl();

            MutableCapabilities sauceOptions = new MutableCapabilities();
            sauceOptions.setCapability("username",sauceUserName);
            sauceOptions.setCapability("accessKey",sauceAccessKey);
            sauceOptions.setCapability("username",sauceUserName);
            sauceOptions.setCapability("maxDuration", 5500);
            /** A Selenium crash might cause a session to hang indefinitely.
             * Below is the max time allowed to wait for a Selenium command*/
            sauceOptions.setCapability("commandTimeout", 600);
            /** How long can the browser wait for a new command */
            sauceOptions.setCapability("idleTimeout", 5000);
            sauceOptions.setCapability("build", "lumeta smoke");

            ChromeOptions browserOptions = new ChromeOptions();
            browserOptions.setExperimentalOption("w3c", true);

            browserOptions.setCapability("sauce:options", sauceOptions);
            browserOptions.setCapability(CapabilityType.ACCEPT_INSECURE_CERTS, true);
            browserOptions.addArguments("test-type");
            browserOptions.addArguments("disable-notifications");

            MutableCapabilities capabilities = new MutableCapabilities();
            capabilities.setCapability("sauce:options", sauceOptions);
            capabilities.setCapability("goog:chromeOptions", browserOptions);
            capabilities.setCapability("browserName", "chrome");
            capabilities.setCapability("platformName", "macOS 10.15");
            capabilities.setCapability("browserVersion", "80.0");

            driver = new RemoteWebDriver(new URL(sauceURL), capabilities);
        }
        else if (TestUtils.BROWSER.equalsIgnoreCase("chrome")) {
            if (OS.indexOf("mac") >= 0) {
                System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir") + "/Drivers/chromedriver");
            } else if (OS.indexOf("windows") >= 0) {
                System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir") + "/Drivers/chromedriver.exe");
            } else {
                System.setProperty("webdriver.chrome.driver",  "./drivers/chromedriverlnx");
            }
            System.setProperty("webdriver.chrome.silentOutput", "true");
            java.util.logging.Logger.getLogger("org.openqa.selenium").setLevel(Level.WARNING);

            ChromeOptions choptions = new ChromeOptions();
            choptions.setCapability(ChromeOptions.CAPABILITY, choptions);
            choptions.setCapability(CapabilityType.ACCEPT_INSECURE_CERTS, true);
            choptions.addArguments("test-type");
            choptions.addArguments("disable-notifications");
            choptions.addArguments("--no-sandbox");
            choptions.addArguments("--disable-setuid-sandbox");
            choptions.addArguments("--disable-dev-shm-using");
            choptions.addArguments("--disable-extensions");
            choptions.addArguments("--disable-gpu");
            choptions.addArguments("start-maximized");
            choptions.addArguments("disable-infobars");

            if (OS.indexOf("mac") < 0 && (OS.indexOf("windows") < 0))
            {
            choptions.addArguments("--headless");
            }

            //choptions.addArguments("--headless");
            choptions.addArguments("--disable-dev-shm-usage");
            driver = new ChromeDriver(choptions);
        } else
            if (TestUtils.BROWSER.equalsIgnoreCase("firefox")) {

            if (OS.indexOf("mac") >= 0) {
                System.setProperty("webdriver.gecko.driver", System.getProperty("user.dir") + "/drivers/geckodriver");
            } else {
                System.setProperty("webdriver.gecko.driver", System.getProperty("user.dir") + "/drivers/geckodriver.exe");
            }
            System.setProperty(FirefoxDriver.SystemProperty.DRIVER_USE_MARIONETTE,"true");
            System.setProperty(FirefoxDriver.SystemProperty.BROWSER_LOGFILE,  "logs.txt");
            java.util.logging.Logger.getLogger("org.openqa.selenium").setLevel(Level.OFF);

            FirefoxOptions option = new FirefoxOptions();
            option.setCapability("marionette", true);
            driver = new FirefoxDriver(option);


        } else if (TestUtils.BROWSER.equalsIgnoreCase("IE")) {
            System.setProperty("webdriver.ie.driver", System.getProperty("user.dir") + "/Drivers/IEDriverServer.exe");

            DesiredCapabilities IEcapabilities = new DesiredCapabilities();
            IEcapabilities.setCapability("requireWindowFocus", true);
            IEcapabilities.setCapability("ignoreZoomSetting", true);
            IEcapabilities.setCapability("ignoreProtectedModeSettings", true);
            IEcapabilities.setCapability("nativeEvents", false);
            IEcapabilities.setCapability("acceptSslCerts", true);
            IEcapabilities.setCapability("initialBrowserUrl", properties.getProperty("url"));
            InternetExplorerOptions opt = new InternetExplorerOptions();
            opt.merge(IEcapabilities);
            driver = new InternetExplorerDriver();
            isIE = true;

        } else if (TestUtils.BROWSER.equalsIgnoreCase("Edge")) {
            System.setProperty("webdriver.edge.driver",
                    System.getProperty("user.dir") + "/Drivers/Medge/MicrosoftWebDriver.exe");
            driver = new EdgeDriver();
            DesiredCapabilities Edgecapabilities = new DesiredCapabilities();
            Edgecapabilities.setCapability("requireWindowFocus", true);
            Edgecapabilities.setCapability("nativeEvents", true);
            Edgecapabilities.setCapability("ignoreProtectedModeSettings", true);
            Edgecapabilities.setCapability("UNHANDLED_PROMPT_BEHAVIOUR", true);
            Edgecapabilities.setCapability("UNEXPECTED_ALERT_BEHAVIOUR", true);
            Edgecapabilities.setJavascriptEnabled(true);
            EdgeOptions eopt = new EdgeOptions();
            eopt.merge(Edgecapabilities);
            isEdge = true;

        }

        driver.manage().deleteAllCookies();
        driver.manage().window().maximize();
	    driver.manage().timeouts().pageLoadTimeout(TestUtils.PAGE_LOAD_TIMEOUT, TimeUnit.SECONDS);
        driver.manage().timeouts().implicitlyWait(TestUtils.IMPLICIT_WAIT, TimeUnit.SECONDS);

        if (isIE) {
            IEoptions();
        }
        if (isEdge) {
            Edgeoptions();
        }

        return driver;
    }


    public void IEoptions() {

        driver.findElement(By.linkText("More information")).click();

        driver.findElement(By.linkText("Go on to the webpage (not recommended)")).click();

    }

    public void Edgeoptions() {

        driver.findElement(By.id("moreInformationDropdownSpan")).click();

        driver.findElement(By.id("invalidcert_continue")).click();

    }

}
